import asyncio
import os
import logging
import warnings
from dotenv import load_dotenv
from langchain_core.messages import HumanMessage
from langchain_mcp_adapters.tools import load_mcp_tools
from langchain_anthropic import ChatAnthropic
from mcp import ClientSession
from mcp.client.sse import sse_client
from langchain import hub
from langgraph.prebuilt import create_react_agent

warnings.filterwarnings("ignore", category=ResourceWarning)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables from .env
load_dotenv()
# Get environment variables for Anthropic and Tavily
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")

# Set up the same server parameters as Cursor
project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
server_script = os.path.join(project_dir, "mcp_server", "server.py")


company_details = {
    "leads": {
        "0": {
            "name": "Assaf Elovic",
            "email": "assaf.elovic@gmail.com",
            "title": "CTO",
            "company": "Tavily",
        }
    },
    "product_description": """""",
    "user_company": "Tavily",
    "user_email": "rotem@tavily.com",
    "user_first_name": "Rotem",
    "user_last_name": "Weiss",
    "logo": "https://yyz2.discourse-cdn.com/flex004/user_avatar/community.tavily.com/system/144/107_2.png",
}

llm = ChatAnthropic(model="claude-3-5-sonnet-20240620", temperature=0)


async def main():
    """
    Connect to the MCP server using SSE, load tools, and run the agent to given content of emails generated by the server.
    """
    # Connect to the MCP server using SSE
    async with sse_client(url="http://localhost:8000/sse") as (read, write):
        async with ClientSession(read_stream=read, write_stream=write) as session:
            await session.initialize()
            logger.info("Session initialized")

            # Load available tools from the MCP session
            tools = await load_mcp_tools(session)
            logger.info("Tools loaded")
            logger.info(tools)

            # Create the agent executor
            agent_executor = create_react_agent(llm, tools)

            # Run the agent to generate emails
            result = await agent_executor.ainvoke(
                {
                    "messages": [
                        HumanMessage(
                            content="Give the content of the email generated using the following company details: "
                            + str(company_details)
                        )
                    ]
                }
            )
            print(result["messages"][-1].content)


if __name__ == "__main__":
    asyncio.run(main())
